"0","library(knitr)"
"0","library(dplyr)"
"2","
Attaching package: â€˜dplyrâ€™

"
"2","The following objects are masked from â€˜package:statsâ€™:

    filter, lag

"
"2","The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

"
"0","library(tidyverse)"
"2","â”€â”€ [1mAttaching core tidyverse packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€
[32mâœ”[39m [34mforcats  [39m 1.0.0     [32mâœ”[39m [34mreadr    [39m 2.1.5
[32mâœ”[39m [34mggplot2  [39m 3.5.0     [32mâœ”[39m [34mstringr  [39m 1.5.1
[32mâœ”[39m [34mlubridate[39m 1.9.3     [32mâœ”[39m [34mtibble   [39m 3.2.1
[32mâœ”[39m [34mpurrr    [39m 1.0.2     [32mâœ”[39m [34mtidyr    [39m 1.3.1"
"2","â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mâœ–[39m [34mtidyr[39m::[32mexpand()[39m masks [34mMatrix[39m::expand()
[31mâœ–[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mâœ–[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
[31mâœ–[39m [34mtidyr[39m::[32mpack()[39m   masks [34mMatrix[39m::pack()
[31mâœ–[39m [34mtidyr[39m::[32munpack()[39m masks [34mMatrix[39m::unpack()
[36mâ„¹[39m Use the ]8;;http://conflicted.r-lib.org/conflicted package]8;; to force all conflicts to become errors"
"0","library(readxl)"
"0","library(beyonce)"
"0","library(ggpubr)"
"0","library(lme4)"
"0","library(lmerTest)"
"0","options(max.print = 999999)"
"0",""
"0","knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)"
"0",""
"0","# open files - create dataframes #"
"0","file_path = 'output_assessment_CHATGPT_explanation.xlsx'"
"0","validate_path = list.files('Raw_Team_Assessment', pattern = 'validate', full.names = TRUE)"
"0","figure_folder = '../Manuscript/Figures'"
"0","# firstcontact-gpt4-32k"
"0","# January 29, ran Elicit and GPT4-32k"
"0","sheet_names <- excel_sheets(file_path)"
"0",""
"0","all_data_list <- lapply(sheet_names, function(sheet) {"
"0","  read_excel(file_path, sheet = sheet) %>% "
"0","    mutate(AI = sheet)})"
"0",""
"0","do_stats = function(x){"
"0","  x %>% "
"0","    summarise(mean = mean(value),"
"0","              standard_error = sd(value, na.rm = TRUE) / sqrt(n()),"
"0","              st_dev = sd(value),"
"0","              difficulty_mean = mean(Difficulty, na.rm = TRUE),"
"0","              st_dev_difficulty = sd(Difficulty, na.rm = TRUE),"
"0","              standard_error_difficulty = sd(Difficulty, na.rm = TRUE) / sqrt(n()),"
"0","    )}"
"0",""
"0","difficulty <- read_excel(""Extraction_Human_Difficulty.xlsx"") %>% as_tibble() %>% "
"0","  pivot_longer(-Question) %>% "
"0","  setNames(c('Citation','Question','Difficulty')) %>% "
"0","  mutate(Difficulty = case_match(Difficulty, 'Easy' ~ 1, 'Medium' ~ 2, 'Hard' ~ 3))"
"0",""
"0","file_path = 'Extraction_ai.xlsx'"
"0","sheets = excel_sheets(file_path)"
"0","ai_extractions <- sheets %>% lapply(function(x) read_excel(file_path, sheet = x) %>% as_tibble() %>% "
"0","                                      mutate(across(everything(), function(x) x %>% str_replace(""Response: "",""""))) %>%"
"0","                                      separate_wider_delim(-Citation, delim = ""Context:"", names = c('Response','Context'), names_sep = '***',too_few = ""align_start"") %>% "
"0","                                      mutate(across(-Citation, nchar))) %>% setNames(sheets)"
"0",""
"0","human_extraction = ""Human_Extraction_Cleaned.xlsx"" %>% "
"0","  read_excel(sheet = 'Human') %>%"
"0","  select(-5, -(seq(8, ncol(.), by = 3))) %>%"
"0","  select(-1) %>% "
"0","  slice(-(1:2)) %>% "
"0","  mutate(across(-Question, nchar)) %>% "
"0","  select(-last_col())"
"2","New names:"
"0","verbosity_ratios = sheets %>% lapply(function(x) bind_cols(human_extraction$Question, (ai_extractions[[x]] %>% select(-1))/(human_extraction %>% select(-1))))"
"2","New names:"
"2","New names:"
"2","New names:"
"0","reviewers = c("
"0","  'R1', ""Which country was the study conducted in?"","
"0","  'R1',""Provide some background as to the drivers and/or motivators of community-based fisheries management."","
"0","  'R2',""What management mechanisms are used?"","
"0","  'R3',""Which groups of people are involved in the management as part of the CBFM case-studies? Choices: Community-members, Researchers, Practitioners, Government, NGOs, Other"","
"0","  'R4',""What benefits of Community-Based Fisheries Management are reported in this case study?"","
"0","  'R4',""What are the indicators of success of CBFM?"","
"0","  'R1',""How was the data on benefits collected?"","
"0","  'R3',""What are the reported barriers to success of Community-Based Fisheries Management?"","
"0","  'R2',""Guidelines for future implementation of CBFM?"","
"0","  'R3',""How does the community monitor the system they are managing?"","
"0","  'R4',""How does the community make decisions?"")"
"0",""
"0","extractor <- ""Human_Extraction_Cleaned.xlsx"" %>% "
"0","  read_excel(sheet = 'Human') %>%"
"0","  dplyr::select(-5, -(seq(8, ncol(.), by = 3))) %>%"
"0","  #dplyr::select(-1) %>% "
"0","  dplyr::slice(-(1:2)) %>% "
"0","  mutate(across(-Question, nchar)) %>% "
"0","  dplyr::select(-last_col()) %>% "
"0","  select(-3:-24) %>% "
"0","  mutate(short_cit = substr(Question, 1,35)) #no idea why citation column is actually the question column in this instance"
"2","New names:"
"0","colnames(extractor)[1] <- ""Extractor"""
"0","colnames(extractor)[2] <- ""Citation"""
"0","colnames(extractor)[3] <- ""short_cit"""
"0",""
"0","reviewers_id <- matrix(reviewers, nrow = length(reviewers) / 2, byrow = TRUE) %>% as_tibble() %>% "
"0","  setNames(c(""Reviewer"",""Question""))"
"2","Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.
Using compatibility `.name_repair`."
"0","df_description = all_data_list %>% bind_rows() %>% "
"0","  pivot_longer(-c('Citation','AI')) %>% "
"0","  separate(value, sep = ':::', into = c(""value"", ""description"")) %>% "
"0","  separate(value, sep = ""\\|"", into = paste0(""rep"",1:5)) %>% "
"0","  separate(description, sep = ""\\|"", into = paste0(""Description"",1:5)) %>% "
"0","  pivot_longer(starts_with('rep'), names_to = 'Agent') "
"2","Warning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [760]."
"0","ai_df <- df_description %>% "
"0","  dplyr::select(-starts_with('Description')) %>% "
"0","  separate(value, sep = ';', into = paste0('Crit', 1:4)) %>% "
"0","  pivot_longer(starts_with('Crit'), names_to = 'Criteria')"
"2","Warning: Expected 4 pieces. Missing pieces filled with `NA` in 5445 rows [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...]."
"0","team_path = ""output_assessment_TEAM.xlsx"" #original file with unedited flag values = output_assessment_TEAM_OG.xlsx"
"0",""
"0","sheet_names <- excel_sheets(team_path)"
"0",""
"0","team_data_list <- lapply(sheet_names, function(sheet) {"
"0","  read_excel(team_path, sheet = sheet) %>% "
"0","    mutate(AI = sheet)"
"0","})"
"0",""
"0","df_validate = validate_path %>% "
"0","  lapply(function(x) sheet_names %>% lapply(function(y)    read_excel(x, sheet = y) %>% "
"0","                                              mutate(AI = y, Reviewer = x %>% str_remove(""Raw_Team_Assessment/validate_assessment_"") %>% str_remove('.xlsx')) %>% "
"0","                                              bind_rows())"
"0","  ) %>% bind_rows() %>% "
"0","  pivot_longer(-c('Citation','AI','Reviewer'), names_to = 'Question',values_to = 'Value') %>% "
"0","  filter(!(Value %>% str_detect(""Response|Context""))) %>% "
"0","  pivot_wider(names_from = 'Reviewer', values_from = 'Value') %>% "
"0","  filter(!is.na(SCOTT)) %>% "
"0","  pivot_longer(-c('Citation','AI','Question'), names_to = 'Reviewer',values_to = 'Value') %>% "
"0","  separate(Value, sep = ';', into = paste0('Crit',1:4)) %>% "
"0","  pivot_longer(starts_with('crit'),values_to = 'value', names_to = 'Criteria') %>% "
"0","  mutate(value = as.numeric(value)) %>% "
"0","  mutate(Reviewer = recode(Reviewer, 'MATT' = 'R1',"
"0","                           'FABIO' = 'R2',"
"0","                           'SCOTT' = 'R3',"
"0","                           'ROWAN' = 'R4'))"
"0",""
"0","stat_summary <- team_data_list %>% bind_rows() %>% "
"0","  pivot_longer(-c(""Citation"",""AI"")) %>% "
"0","  separate(value, sep = ';', into = paste0('Crit',1:4)) %>% "
"0","  pivot_longer(starts_with(""Crit""), names_to = 'Criteria') %>% "
"0","  mutate(Agent = 'Human') %>% "
"0","  bind_rows(ai_df) %>% "
"0","  mutate(Flag = ifelse(Criteria == 'Crit4' & value > 1, ""FLAG"",NA),"
"0","         group_agent = ifelse(str_detect(Agent, ""Human""), ""Human Assessor"", ""GPT4-Turbo Assessor""),"
"0","         value = as.integer(value)) %>% "
"0","  {flag_df <<- .} %>% "
"0","  filter(!is.na(value)) %>% "
"0","  filter(Criteria != 'Crit4') %>%"
"0","  relocate(value, .after = 'group_agent') %>% "
"0","  mutate(Criteria = case_match(Criteria, 'Crit1' ~ 'Context to Question',"
"0","                               'Crit2' ~ 'Response to Context',"
"0","                               'Crit3' ~ 'AI Response to Human Response')) %>% "
"0","  rename('Question' = 'name') %>% "
"0","  left_join(reviewers_id, by = 'Question') %>% "
"0","  mutate(Reviewer = ifelse(str_detect(group_agent,'GPT'),'GPT4-Turbo',Reviewer)) %>% "
"0","  mutate(short_cit = substr(Citation, 1,35)) %>% "
"0","  left_join(difficulty %>%  mutate(short_cit = substr(Citation, 1,35)) %>% dplyr::select(-Citation), by = c(""Question"",'short_cit')) %>%"
"0","  mutate(AI = case_match(AI, 'ELICIT' ~ 'Elicit',"
"0","                         'OPENAI' ~ 'GPT4x3',"
"0","                         'OPENAI_single' ~ 'GPT4x1')) %>% "
"0","  "
"0","  mutate(Question = factor(str_split_fixed(Question, '\\?',2)[,1],levels = str_split_fixed(reviewers_id$Question, '\\?',2)[,1])) %>% "
"0","  {full_df <<- .} %>% "
"0","  group_by(group_agent, AI,Criteria) %>% "
"0","  do_stats()"
"2","Warning: Expected 4 pieces. Missing pieces filled with `NA` in 659 rows [1, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 17, 19, 20, 22, 23, 25, 26, 27, ...]."
"2","Warning: [38;5;253mThere was 1 warning in `mutate()`.[39m
[38;5;253m[36mâ„¹[38;5;253m In argument: `value = as.integer(value)`.[39m
Caused by warning:
[33m![39m NAs introduced by coercion"
"2","`summarise()` has grouped output by 'group_agent', 'AI'. You can override using the `.groups` argument."
"0","full_df <- full_df %>%"
"0","  left_join(extractor, by = ""short_cit"") %>%"
"0","  mutate(Extractor = ifelse(group_agent == ""Human Assessor"", Extractor, ""AI"")) %>% "
"0","  select(-Citation.y) %>% "
"0","  rename(Citation = Citation.x)"
"0",""
"0","question_df <- full_df %>% "
"0","  group_by(Reviewer, AI, Criteria, Question) %>% "
"0","  do_stats()"
"2","`summarise()` has grouped output by 'Reviewer', 'AI', 'Criteria'. You can override using the `.groups` argument."
"0","paper_df <- full_df %>% "
"0","  group_by(group_agent, AI, Criteria, Citation) %>% "
"0","  do_stats()"
"2","`summarise()` has grouped output by 'group_agent', 'AI', 'Criteria'. You can override using the `.groups` argument."
"0","reviewer_df <- full_df %>% "
"0","  group_by(Reviewer, Criteria) %>% "
"0","  do_stats()"
"2","`summarise()` has grouped output by 'Reviewer'. You can override using the `.groups` argument."
"0","flag_df <- flag_df %>% filter(!is.na(Flag))"
"0",""
"0","### Make Plots ####"
"0","crit_pal = beyonce_palette(127)[-1]"
"0","## Overall"
"0","ggplot(stat_summary, aes(x = AI, y = mean, fill = Criteria, group = Criteria)) +"
"0","  geom_hline(yintercept = 2, linetype = 'dashed',alpha = 0.5 ) +"
"0","  geom_col(stat = ""identity"", position = ""dodge"", color = ""black"") +"
"0","  geom_errorbar(aes(ymin = mean - standard_error, ymax = mean + standard_error),"
"0","                position = position_dodge(width = 0.9), width = 0.25) +"
"0","  labs( x = ""AI Implementation"", y = ""Assessed Quality"") +"
"0","  theme_classic() +"
"0","  coord_cartesian(ylim = c(1, 3)) +"
"0","  facet_wrap(~group_agent) +"
"0","  #scale_y_continuous(    labels = c(""Poor"",""Fair"",""Good""),breaks = c(1,2,3),) +"
"0","  scale_fill_manual(values = crit_pal) +"
"0","  theme(legend.position = 'bottom') "
"2","Warning: [38;5;253mIgnoring unknown parameters: `stat`[39m"
